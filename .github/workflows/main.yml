name: Build

on: [push, pull_request]

jobs:
  build_windows:
    name: build-${{ matrix.os }}-${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: x64
            cmake: "-A x64 -C ../external/DirectXShaderCompiler/cmake/caches/PredefinedParams.cmake"
          - os: windows-latest
            platform: arm64
            cmake: "-A ARM64 -C ../external/DirectXShaderCompiler/cmake/caches/PredefinedParams.cmake"
    steps:
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v3

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Create build directory
        run: mkdir build_${{ runner.os }}

      - name: Generate build files
        run: cmake ${{ matrix.cmake }} -S ../external/DirectXShaderCompiler/ -DCMAKE_BUILD_TYPE=Release
        working-directory: build_${{ runner.os }}

      - name: Build
        run: cmake --build . --config Release
        working-directory: build_${{ runner.os }}

  build_mac_linux:
    name: build-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cmake: "-C ../external/DirectXShaderCompiler/cmake/caches/PredefinedParams.cmake"
          - os: macos-latest
            cmake: "-DCMAKE_OSX_ARCHITECTURES=\"x86_64;arm64\" -C ../external/DirectXShaderCompiler/cmake/caches/PredefinedParams.cmake"
      fail-fast: false
    steps:
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v3

      - name: Install Mac Dependencies
        if: runner.os == 'macOS'
        run: |
          brew install cmake autoconf automake libtool

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get install cmake autoconf automake libtool

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Create build directory
        run: mkdir build_${{ runner.os }}

      - name: Generate build files
        run: cmake -B build_${{ runner.os }} ${{ matrix.cmake }} -DCMAKE_BUILD_TYPE=Release -S ../external/DirectXShaderCompiler/
        working-directory: build_${{ runner.os }}

      - name: Build
        run: cmake --build . --config Release
        working-directory: build_${{ runner.os }}
    
  deploy:
    name: deploy
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    needs: [ build_mac_linux, build_windows ]
    steps:
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v3

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Make a release
        if: github.ref_type == 'tag'
        uses: ncipollo/release-action@v1
        with:
          name: 'MonoGame.Tool.BasisUniversal ${{ github.ref_name }}'
          tag: ${{ github.ref_name }}
          allowUpdates: true
          removeArtifacts: true
          artifacts: "artifacts/**/*.nupkg"
          token: ${{ secrets.GITHUB_TOKEN }}